// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BaseUriUpdated extends ethereum.Event {
  get params(): BaseUriUpdated__Params {
    return new BaseUriUpdated__Params(this);
  }
}

export class BaseUriUpdated__Params {
  _event: BaseUriUpdated;

  constructor(event: BaseUriUpdated) {
    this._event = event;
  }

  get newBaseUri(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class ConsecutiveTransfer extends ethereum.Event {
  get params(): ConsecutiveTransfer__Params {
    return new ConsecutiveTransfer__Params(this);
  }
}

export class ConsecutiveTransfer__Params {
  _event: ConsecutiveTransfer;

  constructor(event: ConsecutiveTransfer) {
    this._event = event;
  }

  get fromTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get toTokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get from(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class GameAddressUpdated extends ethereum.Event {
  get params(): GameAddressUpdated__Params {
    return new GameAddressUpdated__Params(this);
  }
}

export class GameAddressUpdated__Params {
  _event: GameAddressUpdated;

  constructor(event: GameAddressUpdated) {
    this._event = event;
  }

  get game(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class HandsMinted extends ethereum.Event {
  get params(): HandsMinted__Params {
    return new HandsMinted__Params(this);
  }
}

export class HandsMinted__Params {
  _event: HandsMinted;

  constructor(event: HandsMinted) {
    this._event = event;
  }

  get receiver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class HandsWon extends ethereum.Event {
  get params(): HandsWon__Params {
    return new HandsWon__Params(this);
  }
}

export class HandsWon__Params {
  _event: HandsWon;

  constructor(event: HandsWon) {
    this._event = event;
  }

  get winner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class HiddenUriUpdated extends ethereum.Event {
  get params(): HiddenUriUpdated__Params {
    return new HiddenUriUpdated__Params(this);
  }
}

export class HiddenUriUpdated__Params {
  _event: HiddenUriUpdated;

  constructor(event: HiddenUriUpdated) {
    this._event = event;
  }

  get newHiddenUri(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class ContractOwnershipTransferred extends ethereum.Event {
  get params(): ContractOwnershipTransferred__Params {
    return new ContractOwnershipTransferred__Params(this);
  }
}

export class ContractOwnershipTransferred__Params {
  _event: ContractOwnershipTransferred;

  constructor(event: ContractOwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ContractPaused extends ethereum.Event {
  get params(): ContractPaused__Params {
    return new ContractPaused__Params(this);
  }
}

export class ContractPaused__Params {
  _event: ContractPaused;

  constructor(event: ContractPaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PresaleToggled extends ethereum.Event {
  get params(): PresaleToggled__Params {
    return new PresaleToggled__Params(this);
  }
}

export class PresaleToggled__Params {
  _event: PresaleToggled;

  constructor(event: PresaleToggled) {
    this._event = event;
  }
}

export class PriceUpdated extends ethereum.Event {
  get params(): PriceUpdated__Params {
    return new PriceUpdated__Params(this);
  }
}

export class PriceUpdated__Params {
  _event: PriceUpdated;

  constructor(event: PriceUpdated) {
    this._event = event;
  }

  get newPrice(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Revealed extends ethereum.Event {
  get params(): Revealed__Params {
    return new Revealed__Params(this);
  }
}

export class Revealed__Params {
  _event: Revealed;

  constructor(event: Revealed) {
    this._event = event;
  }
}

export class RootHashUpdated extends ethereum.Event {
  get params(): RootHashUpdated__Params {
    return new RootHashUpdated__Params(this);
  }
}

export class RootHashUpdated__Params {
  _event: RootHashUpdated;

  constructor(event: RootHashUpdated) {
    this._event = event;
  }

  get newRootHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ContractUnpaused extends ethereum.Event {
  get params(): ContractUnpaused__Params {
    return new ContractUnpaused__Params(this);
  }
}

export class ContractUnpaused__Params {
  _event: ContractUnpaused;

  constructor(event: ContractUnpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class WhitelistAdded extends ethereum.Event {
  get params(): WhitelistAdded__Params {
    return new WhitelistAdded__Params(this);
  }
}

export class WhitelistAdded__Params {
  _event: WhitelistAdded;

  constructor(event: WhitelistAdded) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class WhitelistRemoved extends ethereum.Event {
  get params(): WhitelistRemoved__Params {
    return new WhitelistRemoved__Params(this);
  }
}

export class WhitelistRemoved__Params {
  _event: WhitelistRemoved;

  constructor(event: WhitelistRemoved) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getBaseUri(): string {
    let result = super.call("getBaseUri", "getBaseUri():(string)", []);

    return result[0].toString();
  }

  try_getBaseUri(): ethereum.CallResult<string> {
    let result = super.tryCall("getBaseUri", "getBaseUri():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getGameAddress(): Address {
    let result = super.call("getGameAddress", "getGameAddress():(address)", []);

    return result[0].toAddress();
  }

  try_getGameAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getGameAddress",
      "getGameAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getHiddenUri(): string {
    let result = super.call("getHiddenUri", "getHiddenUri():(string)", []);

    return result[0].toString();
  }

  try_getHiddenUri(): ethereum.CallResult<string> {
    let result = super.tryCall("getHiddenUri", "getHiddenUri():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getIsPresale(): boolean {
    let result = super.call("getIsPresale", "getIsPresale():(bool)", []);

    return result[0].toBoolean();
  }

  try_getIsPresale(): ethereum.CallResult<boolean> {
    let result = super.tryCall("getIsPresale", "getIsPresale():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getMaxHands(): BigInt {
    let result = super.call("getMaxHands", "getMaxHands():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getMaxHands(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getMaxHands", "getMaxHands():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMaxHandsAvailableToMint(): BigInt {
    let result = super.call(
      "getMaxHandsAvailableToMint",
      "getMaxHandsAvailableToMint():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getMaxHandsAvailableToMint(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMaxHandsAvailableToMint",
      "getMaxHandsAvailableToMint():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMaxHandsAvailableToWin(): BigInt {
    let result = super.call(
      "getMaxHandsAvailableToWin",
      "getMaxHandsAvailableToWin():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getMaxHandsAvailableToWin(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMaxHandsAvailableToWin",
      "getMaxHandsAvailableToWin():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMaxHandsPerTx(): BigInt {
    let result = super.call(
      "getMaxHandsPerTx",
      "getMaxHandsPerTx():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getMaxHandsPerTx(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMaxHandsPerTx",
      "getMaxHandsPerTx():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPrice(): BigInt {
    let result = super.call("getPrice", "getPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getPrice", "getPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalHandsMinted(): BigInt {
    let result = super.call(
      "getTotalHandsMinted",
      "getTotalHandsMinted():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalHandsMinted(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalHandsMinted",
      "getTotalHandsMinted():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalHandsWinned(): BigInt {
    let result = super.call(
      "getTotalHandsWinned",
      "getTotalHandsWinned():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalHandsWinned(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalHandsWinned",
      "getTotalHandsWinned():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  s_isWhitelist(param0: Address): boolean {
    let result = super.call("s_isWhitelist", "s_isWhitelist(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_s_isWhitelist(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "s_isWhitelist",
      "s_isWhitelist(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(_tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(_tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _baseUri(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _hiddenUri(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddWhitelistCall extends ethereum.Call {
  get inputs(): AddWhitelistCall__Inputs {
    return new AddWhitelistCall__Inputs(this);
  }

  get outputs(): AddWhitelistCall__Outputs {
    return new AddWhitelistCall__Outputs(this);
  }
}

export class AddWhitelistCall__Inputs {
  _call: AddWhitelistCall;

  constructor(call: AddWhitelistCall) {
    this._call = call;
  }

  get _addresses(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class AddWhitelistCall__Outputs {
  _call: AddWhitelistCall;

  constructor(call: AddWhitelistCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class MintHandsCall extends ethereum.Call {
  get inputs(): MintHandsCall__Inputs {
    return new MintHandsCall__Inputs(this);
  }

  get outputs(): MintHandsCall__Outputs {
    return new MintHandsCall__Outputs(this);
  }
}

export class MintHandsCall__Inputs {
  _call: MintHandsCall;

  constructor(call: MintHandsCall) {
    this._call = call;
  }

  get _mintAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MintHandsCall__Outputs {
  _call: MintHandsCall;

  constructor(call: MintHandsCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RemoveWhitelistCall extends ethereum.Call {
  get inputs(): RemoveWhitelistCall__Inputs {
    return new RemoveWhitelistCall__Inputs(this);
  }

  get outputs(): RemoveWhitelistCall__Outputs {
    return new RemoveWhitelistCall__Outputs(this);
  }
}

export class RemoveWhitelistCall__Inputs {
  _call: RemoveWhitelistCall;

  constructor(call: RemoveWhitelistCall) {
    this._call = call;
  }

  get _addresses(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class RemoveWhitelistCall__Outputs {
  _call: RemoveWhitelistCall;

  constructor(call: RemoveWhitelistCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RevealHandsCall extends ethereum.Call {
  get inputs(): RevealHandsCall__Inputs {
    return new RevealHandsCall__Inputs(this);
  }

  get outputs(): RevealHandsCall__Outputs {
    return new RevealHandsCall__Outputs(this);
  }
}

export class RevealHandsCall__Inputs {
  _call: RevealHandsCall;

  constructor(call: RevealHandsCall) {
    this._call = call;
  }
}

export class RevealHandsCall__Outputs {
  _call: RevealHandsCall;

  constructor(call: RevealHandsCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class TogglePresaleCall extends ethereum.Call {
  get inputs(): TogglePresaleCall__Inputs {
    return new TogglePresaleCall__Inputs(this);
  }

  get outputs(): TogglePresaleCall__Outputs {
    return new TogglePresaleCall__Outputs(this);
  }
}

export class TogglePresaleCall__Inputs {
  _call: TogglePresaleCall;

  constructor(call: TogglePresaleCall) {
    this._call = call;
  }
}

export class TogglePresaleCall__Outputs {
  _call: TogglePresaleCall;

  constructor(call: TogglePresaleCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdateBaseUriCall extends ethereum.Call {
  get inputs(): UpdateBaseUriCall__Inputs {
    return new UpdateBaseUriCall__Inputs(this);
  }

  get outputs(): UpdateBaseUriCall__Outputs {
    return new UpdateBaseUriCall__Outputs(this);
  }
}

export class UpdateBaseUriCall__Inputs {
  _call: UpdateBaseUriCall;

  constructor(call: UpdateBaseUriCall) {
    this._call = call;
  }

  get _baseUri(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class UpdateBaseUriCall__Outputs {
  _call: UpdateBaseUriCall;

  constructor(call: UpdateBaseUriCall) {
    this._call = call;
  }
}

export class UpdateGameAddressCall extends ethereum.Call {
  get inputs(): UpdateGameAddressCall__Inputs {
    return new UpdateGameAddressCall__Inputs(this);
  }

  get outputs(): UpdateGameAddressCall__Outputs {
    return new UpdateGameAddressCall__Outputs(this);
  }
}

export class UpdateGameAddressCall__Inputs {
  _call: UpdateGameAddressCall;

  constructor(call: UpdateGameAddressCall) {
    this._call = call;
  }

  get _game(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateGameAddressCall__Outputs {
  _call: UpdateGameAddressCall;

  constructor(call: UpdateGameAddressCall) {
    this._call = call;
  }
}

export class UpdateHiddenUriCall extends ethereum.Call {
  get inputs(): UpdateHiddenUriCall__Inputs {
    return new UpdateHiddenUriCall__Inputs(this);
  }

  get outputs(): UpdateHiddenUriCall__Outputs {
    return new UpdateHiddenUriCall__Outputs(this);
  }
}

export class UpdateHiddenUriCall__Inputs {
  _call: UpdateHiddenUriCall;

  constructor(call: UpdateHiddenUriCall) {
    this._call = call;
  }

  get _hiddenUri(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class UpdateHiddenUriCall__Outputs {
  _call: UpdateHiddenUriCall;

  constructor(call: UpdateHiddenUriCall) {
    this._call = call;
  }
}

export class UpdatePriceCall extends ethereum.Call {
  get inputs(): UpdatePriceCall__Inputs {
    return new UpdatePriceCall__Inputs(this);
  }

  get outputs(): UpdatePriceCall__Outputs {
    return new UpdatePriceCall__Outputs(this);
  }
}

export class UpdatePriceCall__Inputs {
  _call: UpdatePriceCall;

  constructor(call: UpdatePriceCall) {
    this._call = call;
  }

  get _price(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdatePriceCall__Outputs {
  _call: UpdatePriceCall;

  constructor(call: UpdatePriceCall) {
    this._call = call;
  }
}

export class WinHandsCall extends ethereum.Call {
  get inputs(): WinHandsCall__Inputs {
    return new WinHandsCall__Inputs(this);
  }

  get outputs(): WinHandsCall__Outputs {
    return new WinHandsCall__Outputs(this);
  }
}

export class WinHandsCall__Inputs {
  _call: WinHandsCall;

  constructor(call: WinHandsCall) {
    this._call = call;
  }

  get _winner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WinHandsCall__Outputs {
  _call: WinHandsCall;

  constructor(call: WinHandsCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
