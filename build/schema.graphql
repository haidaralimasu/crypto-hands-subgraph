type Approval @entity {
  id: ID!
  owner: Bytes! # address
  approved: Bytes! # address
  tokenId: BigInt! # uint256
}

type ApprovalForAll @entity {
  id: ID!
  owner: Bytes! # address
  operator: Bytes! # address
  approved: Boolean! # bool
}

type BaseUriUpdated @entity {
  id: ID!
  newBaseUri: String! # string
}

type ConsecutiveTransfer @entity {
  id: ID!
  fromTokenId: BigInt! # uint256
  toTokenId: BigInt! # uint256
  from: Bytes! # address
  to: Bytes! # address
}

type GameAddressUpdated @entity {
  id: ID!
  game: Bytes! # address
}

type HandsMinted @entity {
  id: ID!
  receiver: Bytes! # address
  amount: BigInt! # uint256
}

type HandsWon @entity {
  id: ID!
  winner: Bytes! # address
}

type HiddenUriUpdated @entity {
  id: ID!
  newHiddenUri: String! # string
}

type ContractOwnershipTransferred @entity {
  id: ID!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
}

type ContractPaused @entity {
  id: ID!
  account: Bytes! # address
}

type PresaleToggled @entity {
  id: ID!
}

type PriceUpdated @entity {
  id: ID!
  newPrice: BigInt! # uint256
}

type Revealed @entity {
  id: ID!
}

type RootHashUpdated @entity {
  id: ID!
  newRootHash: Bytes! # bytes32
}

type Transfer @entity {
  id: ID!
  from: Bytes! # address
  to: Bytes! # address
  tokenId: BigInt! # uint256
}

type ContractUnpaused @entity {
  id: ID!
  account: Bytes! # address
}

type WhitelistAdded @entity {
  id: ID!
  user: Bytes! # address
}

type WhitelistRemoved @entity {
  id: ID!
  user: Bytes! # address
}
type BetCreated @entity {
  id: ID!
  _betId: BigInt! # uint256
  _playerChoice: Int! # uint8
  _player: Bytes! # address
  _betAmount: BigInt! # uint256
  _winAmount: BigInt! # uint256
  _time: BigInt! # uint256
}

type CryptoHandsUpdated @entity {
  id: ID!
  _newCryptoHands: Bytes! # address
}

type DividerUpdated @entity {
  id: ID!
  _newDivider: BigInt! # uint256
}

type MaxBetUpdated @entity {
  id: ID!
  _newMaxBet: BigInt! # uint256
}

type MinBetUpdated @entity {
  id: ID!
  _newMinBet: BigInt! # uint256
}

type OwnershipTransferred @entity {
  id: ID!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
}

type Paused @entity {
  id: ID!
  account: Bytes! # address
}

type ResultsDeclared @entity {
  id: ID!
  _betId: BigInt! # uint256
  _choice: Int! # uint8
  _outcome: Int! # uint8
  _amount: BigInt! # uint256
  _winAmount: BigInt! # uint256
  _player: Bytes! # address
  _result: Int! # uint8
  _time: BigInt! # uint256
}

type Unpaused @entity {
  id: ID!
  account: Bytes! # address
}
